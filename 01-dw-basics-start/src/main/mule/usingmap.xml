<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="usingmapFlow" doc:id="fa56d194-b74b-4d33-ba57-3d5bc94cc75b" >
		<ee:transform doc:name="Transform Message" doc:id="6ebda745-c349-4632-8116-74e8cac1bb63" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw
ns myns http://way2learnonline.com/domain
fun getImages(images) = {
			(images map {
    	  		img: $
		    })
		}
		
var products=payload.products.*product map {
    'product': {productId: $.@productId,
	name: $.name ++ $$,
	brandName: $.brandName,
	originalPrice: $.originalPrice as Number,
	offerValidUntil: $.offer.offerValidUntil as Date,
	(images: getImages($.images.*image)) if	$.images?
	}
}

var products2=payload.products.*product map (item,index) ->  {
    'product': {productId: item.@productId,
	name: item.name ++ index,
	brandName: item.brandName,
	originalPrice: item.originalPrice		
	}
}
var sortedProducts = products orderBy -$.product.originalPrice

fun convertKeysToUpper(obj)=
  if (typeOf(obj) ==Object)
	obj mapObject (V,K,I) -> {
		(upper(K)):convertKeysToUpper(V)
	}
else if (typeOf(obj)==Date)	
   obj as String{format:"MMM-dd"}
else if(typeOf(obj) == Number)
   obj as Number {format:"#,###.00"}
else   
   obj
   	
fun convertUsingMatch(obj)=
  obj match {
  	case is Date -> obj as String{format:"MMM-dd"}
  	case is String -> obj as String
  	case is Number -> obj as Number {format: "#,###.00"}
  	case myobj is Object -> myobj mapObject (V,K,I) -> {
		(upper(K)):convertKeysToUpper(V)
	}
  	else -> "Incorrect Data"
  }
fun convertKeysToUpperUsingif(obj)  =
     obj mapObject(value,key) -> {
     	(upper(key)) : value
     }
---
convertUsingMatch(products: {(products)})
//products minBy $.product.originalPrice
//products maxBy $.product.originalPrice
//products distinctBy $.product.brandName
//products filter $.product.brandName=='HP'
//filter(products, (item,index) -> item.product.brandName=='HP')
/*map(products, (item,index) ->   {
    'product': {
    	productId: item.@productId,
	name: item.name,
	brandName: item.brandName,
	originalPrice: item.originalPrice		
	}
})*/
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
